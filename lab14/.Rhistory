selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(x = input$x, fill = vore))+
geom_boxplot()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("y",
"Select Y Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(x = input$x, fill = vore))+
geom_boxplot()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("y",
"Select Y Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(x = input$x, y = input$y))+
geom_boxplot()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("y",
"Select Y Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(x = input$x, y = input$y, fill = vore))+
geom_boxplot()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot()+
})
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot()+
})
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot()+
labs(x = "Vore", y = input$x, fill = "Vore") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot()+
labs(x = "vore", y = input$x, fill = "vore") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$x, fill = vore))+
geom_boxplot(na.rm = T)+
labs(x = "vore", y = input$x, fill = "vore") +
theme_minimal()
})
}
shinyApp(ui, server)
ggplot(data=msleep, aes_string(x = vore, y = input$y, color = vore))+
geom_boxplot()+
theme_minimal()
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep, aes_string(x = vore, y = input$y, color = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep %>% filter(!is.na(vore)),
aes_string(x = vore, y = input$y, color = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep %>% filter(!is.na(vore)),
aes_string(x = vore, y = .data[[input$y]], color = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep %>% filter(!is.na(vore)),
aes_string(x = vore, y = .data[[input$y]], fill = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
session$onSessionEnded(stopApp)
ggplot(data=msleep %>% filter(!is.na(vore)),
aes_string(x = vore, y = input$y, fill = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable"),
choices = c("vore"),
selected = "vore"),
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable"),
choices = c("vore"),
selected = "vore")
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable"),
choices = c("vore"),
selected = "vore"),
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(x = vore, y = input$y, fill = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(y = input$y, fill = input$x))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(y = input$y, fill = vore))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
selectInput("x",
"Select Fill Variable",
choices = c("vore"),
selected = "vore"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(y = input$y, fill = input$x))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Sleep Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
session$onSessionEnded(stopApp)
ggplot(data=msleep,
aes_string(y = input$y, fill = "vore"))+
geom_boxplot()+
theme_minimal()
})
}
shinyApp(ui, server)
msleep %>%
filter(vore!=NA) %>%
select(vore, taxon)
msleep %>%
filter(vore!=NA) %>%
select(vore, name)
msleep %>%
filter(vore!=NA) %>%
select(vore)
msleep %>%
filter(vore!="NA") %>%
select(vore)
msleep %>%
filter(vore!="NA") %>%
group_by(vore) %>%
ggplot(aes(x= vore, y = sleep_total, fill = vore))+
geom_density()
msleep %>%
filter(vore!="NA") %>%
group_by(vore) %>%
ggplot(aes(x= sleep_total, fill = vore))+
geom_density()
msleep %>%
filter(vore!="NA") %>%
group_by(vore) %>%
ggplot(aes(x= sleep_total, fill = vore))+
geom_density(alpha = 0.6)
msleep %>%
filter(vore!="NA") %>%
group_by(vore) %>%
ggplot(aes(x= sleep_total, fill = vore))+
geom_density(alpha = 0.6)+
labs(title = "Distribution of Sleep")
msleep %>%
filter(vore!="NA") %>%
group_by(vore) %>%
ggplot(aes(x= sleep_total, fill = vore))+
geom_density(alpha = 0.6)+
labs(title = "Distribution of Sleep")+
theme(plot.title=element_text(size=rel(1.5), hjust = 0.5))
library(shiny)
ui <- fluidPage(titlePanel("Distribution of Sleep")
selectInput("x",
library(shiny)
ui <- fluidPage(titlePanel("Distribution of Sleep"),
selectInput("x",
"Select Vore",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Distribution of Sleep"),
selectInput("x",
"Select Vore",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x)
ggplot(aes(x = sleep_total))+
geom_density(fill = "steelblue", alpha = 0.6, color = "black")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Distribution of Sleep"),
selectInput("x",
"Select Vore",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x)
ggplot(aes(sleep_total))+
geom_density(fill = "steelblue", alpha = 0.6, color = "black")+
labs(x = "Sleep Total", y = NULL)+
theme_minimal(base_size = 14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Distribution of Sleep"),
selectInput("x",
"Select Vore",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(sleep_total))+
geom_density(fill = "steelblue", alpha = 0.6, color = "black")+
labs(x = "Sleep Total", y = NULL)+
theme_minimal(base_size = 14)
})
}
shinyApp(ui, server)
