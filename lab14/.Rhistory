choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
), # close the first box
box(title = "Plot of Penguins Data", width = 6, #adjust the column width and add title
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins,
aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
## First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
selectInput("taxon",
"Select Taxon of Interest:",
choices=unique(homerange$taxon))
)
)
),
## Second tab item
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild")
)
)
)
)
)
)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
## First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
selectInput("taxon",
"Select Taxon of Interest:",
choices=unique(homerange$taxon))
)
)
),
## Second tab item
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild")
)
)
)
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x = log10.hra)) +
geom_density(color = "black", fill = "steelblue", alpha = 0.6)
})
output$plot2 <- renderPlot({
homerange %>%
ggplot(aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
## First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
selectInput("taxon",
"Select Taxon of Interest:",
choices=unique(homerange$taxon))
)
)
),
## Second tab item
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild")
)
)
)
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x = log10.hra)) +
geom_density(color = "black", fill = "steelblue", alpha = 0.6)
})
output$plot2 <- renderPlot({
homerange %>%
ggplot(aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
## First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
selectInput("taxon",
"Select Taxon of Interest:",
choices=unique(homerange$taxon))
)
)
),
## Second tab item
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild")
)
)
)
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x = log10.hra)) +
geom_density(color = "black", fill = "steelblue", alpha = 0.6)
})
output$plot2 <- renderPlot({
homerange %>%
ggplot(aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
write.csv(nematode, "Soil_nematodes_all_data_final_Dryad.xlsx", row.names = FALSE)
nematode <- read_excel("Soil_nematodes_all_data_final_Dryad.xlsx", sheet = 1)
library(readx1)
library(readxl)
nematode <- read_excel("Soil_nematodes_all_data_final_Dryad.xlsx", sheet = 1)
View(nematode)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
),
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
)
server <- function(input, output, session) {
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
)
server <- function(input, output, session) {
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Homerange Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Log10 HRA",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Counts",
tabName = "widgets",
icon = icon("th"))
server <- function(input, output, session) {
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("pH",
tabName = "dashboard",
icon = icon("dashboard")),
menuItem("Elevation",
tabName = "widgets",
icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
## First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
selectInput("taxon",
"Select Taxon of Interest:",
choices=unique(homerange$taxon))
)
)
),
## Second tab item
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)), # box is a container for the plot
box(title = "Controls", # box is a container for the controls
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild")
)
)
)
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
write.csv(nematode, "nematode.csv", row.names = FALSE)
nematode <- clean_names(nematode)
library(shiny)
nematode_data <- read.csv("data/nematode.csv", stringsAsFactors = FALSE )
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
# new column for the popup label
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',transect,
'<br><strong>Site:</strong> ', site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',elevation,
'<br><strong>Temperature:</strong> ',temperature,
'<br><strong>Moisture:</strong> ',moisture,
'<br><strong>SMI:</strong> ',sigma_maturity_index))
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode)
nematode_data$Latitude <-  as.numeric(nematode$Latitude)
View(nematode_data)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
# new column for the popup label
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',transect,
'<br><strong>Site:</strong> ', site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',elevation,
'<br><strong>Temperature:</strong> ',temperature,
'<br><strong>Moisture:</strong> ',moisture,
'<br><strong>SMI:</strong> ',sigma_maturity_index))
nematode_data <- clean_names(nematode_data)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
# new column for the popup label
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',transect,
'<br><strong>Site:</strong> ', site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',elevation,
'<br><strong>Temperature:</strong> ',temperature,
'<br><strong>Moisture:</strong> ',moisture,
'<br><strong>SMI:</strong> ',sigma_maturity_index))
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
# new column for the popup label
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',Transect,
'<br><strong>Site:</strong> ', Site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',elevation,
'<br><strong>Temperature:</strong> ',temperature,
'<br><strong>Moisture:</strong> ',moisture,
'<br><strong>SMI:</strong> ',sigma_maturity_index))
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
# new column for the popup label
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',Transect,
'<br><strong>Site:</strong> ', Site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',Elevation,
'<br><strong>Temperature:</strong> ',Temperature,
'<br><strong>Moisture:</strong> ',Moisture,
'<br><strong>SMI:</strong> ',Sigma.Maturity.Index))
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',Transect,
'<br><strong>Site:</strong> ', Site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',Elevation,
'<br><strong>Temperature:</strong> ',Temperature,
'<br><strong>Moisture:</strong> ',Moisture,
'<br><strong>SMI:</strong> ',Sigma.Maturity.Index))
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',Transect,
'<br><strong>Site:</strong> ', Site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',Elevation,
'<br><strong>Temperature:</strong> ',Temperature,
'<br><strong>Moisture:</strong> ',Moisture,
'<br><strong>SMI:</strong> ',Sigma.Maturity.Index))
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
nematode_data <- read.csv("nematode.csv", stringsAsFactors = FALSE )
nematode_data <- data.frame(nematode_data)
nematode_data$Latitude <-  as.numeric(nematode_data$Latitude)
nematode_data$Longitude <-  as.numeric(nematode_data$Longitude)
nematode_data=filter(nematode_data, Latitude != "NA") # removing NA values
nematode_data <- mutate(nematode_data, cntnt=paste0('<strong>Transect: </strong>',Transect,
'<br><strong>Site:</strong> ', Site,
'<br><strong>pH:</strong> ', pH,
'<br><strong>Elevation:</strong> ',Elevation,
'<br><strong>Temperature:</strong> ',Temperature,
'<br><strong>Moisture:</strong> ',Moisture,
'<br><strong>SMI:</strong> ',Sigma.Maturity.Index))
server <- function(input, output, session) {
}
shinyApp(ui, server)
